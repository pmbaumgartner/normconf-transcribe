1
00:00:00,000 --> 00:00:04,880
I am excited to talk about OpenAPI 3 today.

2
00:00:04,880 --> 00:00:09,940
As someone who is working on a new company building APIs,

3
00:00:09,940 --> 00:00:13,160
this has been an important specification

4
00:00:13,160 --> 00:00:14,600
and made my job a lot easier.

5
00:00:14,600 --> 00:00:18,040
I wanted to just give a little intro

6
00:00:18,040 --> 00:00:22,440
and talk through how exactly it makes my life easier.

7
00:00:22,760 --> 00:00:27,940
For the agenda, I'll talk about why OpenAPI 3 a bit.

8
00:00:27,940 --> 00:00:31,140
I'll talk about my experience building API integrations

9
00:00:31,140 --> 00:00:33,400
across different fintech domains.

10
00:00:33,400 --> 00:00:36,920
I'll talk about OpenAPI 3 specification,

11
00:00:36,920 --> 00:00:39,680
its history, its use cases.

12
00:00:39,680 --> 00:00:44,500
I will do a demo of some OpenAPI 3 tools,

13
00:00:44,500 --> 00:00:47,720
and then I'll wrap up at that point.

14
00:00:49,120 --> 00:00:53,240
Let's talk for a second about financial APIs.

15
00:00:53,240 --> 00:00:57,080
Some of the most popular financial APIs out there,

16
00:00:57,080 --> 00:00:58,880
like the Stripe API,

17
00:00:58,880 --> 00:01:02,280
which enables you to make payments online.

18
00:01:02,280 --> 00:01:05,680
This API has enabled all sorts of

19
00:01:05,680 --> 00:01:10,000
new use cases for payments in the world and in apps.

20
00:01:10,000 --> 00:01:11,960
There are also open banking,

21
00:01:11,960 --> 00:01:16,480
so Plaid, Fnicity, these APIs allow you to

22
00:01:16,480 --> 00:01:18,560
connect to bank accounts and

23
00:01:18,560 --> 00:01:21,720
programmatically exchange information.

24
00:01:21,720 --> 00:01:24,360
But all of these together can really

25
00:01:24,360 --> 00:01:26,960
enrich our lives as individuals

26
00:01:26,960 --> 00:01:29,520
and also our lives as businesses by

27
00:01:29,520 --> 00:01:32,440
enabling that quick transport of data,

28
00:01:32,440 --> 00:01:34,780
and then enabling new ways to

29
00:01:34,780 --> 00:01:37,840
look at things like underwriting.

30
00:01:37,840 --> 00:01:40,520
Understanding someone's financial history,

31
00:01:40,520 --> 00:01:42,200
some alternatives to

32
00:01:42,200 --> 00:01:44,920
our traditional methods of underwriting, for example,

33
00:01:44,920 --> 00:01:48,480
and then other financial instruments as well.

34
00:01:48,480 --> 00:01:50,680
That's what I am building,

35
00:01:50,680 --> 00:01:52,880
and that's why I'm

36
00:01:52,880 --> 00:01:55,880
interfacing with so many different types of APIs.

37
00:01:55,880 --> 00:02:01,160
I've encountered quite a bit of difficulties with that,

38
00:02:01,160 --> 00:02:04,360
and OpenAPI 3, whenever I

39
00:02:04,360 --> 00:02:06,040
have a specification for that,

40
00:02:06,040 --> 00:02:08,320
has made things a lot easier.

41
00:02:08,320 --> 00:02:13,000
Let's talk a little bit about RESTful APIs for a second.

42
00:02:13,000 --> 00:02:18,440
In general, this is your basic setup for a CRUD API.

43
00:02:18,440 --> 00:02:21,280
You will have five methods,

44
00:02:21,280 --> 00:02:25,920
so a get, a post, a put, a patch, and a delete.

45
00:02:25,920 --> 00:02:32,440
Get should give you a list of that object back.

46
00:02:32,440 --> 00:02:36,440
In this case, if you have slash products on the path

47
00:02:36,440 --> 00:02:37,920
without the SKU on the end,

48
00:02:37,920 --> 00:02:43,120
that should give you back all the products in that collection.

49
00:02:43,120 --> 00:02:45,080
If you add the SKU to the end,

50
00:02:45,080 --> 00:02:47,160
then that should give you the one product.

51
00:02:47,160 --> 00:02:50,920
Post will allow you to create products.

52
00:02:50,920 --> 00:02:53,640
You should have some body that corresponds to a product,

53
00:02:53,640 --> 00:02:55,520
and you'll be able to create that.

54
00:02:55,520 --> 00:02:59,400
Put would give you a complete update,

55
00:02:59,400 --> 00:03:04,160
so you are replacing that SKU with a new SKU,

56
00:03:04,160 --> 00:03:06,040
but keeping the same ID.

57
00:03:06,040 --> 00:03:09,160
Patch would allow you to update one field,

58
00:03:09,160 --> 00:03:11,760
so a mutation of that data,

59
00:03:11,760 --> 00:03:15,360
and then delete would allow you to delete that data.

60
00:03:15,360 --> 00:03:19,040
This is the philosophical idea

61
00:03:19,040 --> 00:03:23,920
behind the HTTP and REST APIs.

62
00:03:23,920 --> 00:03:26,360
However, the reality is that

63
00:03:26,360 --> 00:03:29,480
people don't all implement this the same way.

64
00:03:29,480 --> 00:03:33,240
Some ways that this can go wrong and that API design can be

65
00:03:33,240 --> 00:03:36,960
hard are small things to big things.

66
00:03:36,960 --> 00:03:38,800
Let's talk about some of the small things.

67
00:03:38,800 --> 00:03:42,520
Let's consider someone who believes

68
00:03:42,520 --> 00:03:45,560
that instead of making this plural products,

69
00:03:45,560 --> 00:03:47,360
that it should be product.

70
00:03:47,360 --> 00:03:49,960
That's one way that they can do it.

71
00:03:49,960 --> 00:03:53,600
There also may be some APIs that believe that this is

72
00:03:53,600 --> 00:03:56,280
too robust and too many methods,

73
00:03:56,280 --> 00:03:59,160
and so they might make a post API for everything.

74
00:03:59,160 --> 00:04:03,560
There might be post slash products slash delete,

75
00:04:03,560 --> 00:04:06,720
and then that would take

76
00:04:06,720 --> 00:04:10,080
over the same effect as a delete HTTP method.

77
00:04:10,080 --> 00:04:14,000
Or you may have the patches and the puts

78
00:04:14,000 --> 00:04:18,240
and the gets all be implemented in post as well.

79
00:04:18,240 --> 00:04:22,480
Furthermore, you may not want to use

80
00:04:22,480 --> 00:04:26,160
the path in order to pass this QID.

81
00:04:26,160 --> 00:04:27,880
You may pass it in a header,

82
00:04:27,880 --> 00:04:29,720
you may pass it in a body.

83
00:04:29,720 --> 00:04:33,200
As someone who's integrating with an API,

84
00:04:33,200 --> 00:04:36,680
you get used to the pattern that you see,

85
00:04:36,680 --> 00:04:38,960
and then you go to another API and they

86
00:04:38,960 --> 00:04:41,600
follow a completely different pattern.

87
00:04:41,600 --> 00:04:46,240
Reusing your code, doing things in a way that is modular,

88
00:04:46,240 --> 00:04:50,080
becomes very difficult and strenuous.

89
00:04:50,080 --> 00:04:53,960
OpenAPI 3 is an attempt to,

90
00:04:53,960 --> 00:04:56,840
one, standardize on how these APIs should look,

91
00:04:56,840 --> 00:05:02,520
and then two, provide some ecosystem around these APIs,

92
00:05:02,520 --> 00:05:05,800
so consuming them is a little bit easier.

93
00:05:05,800 --> 00:05:09,480
OpenAPI 3, what it is,

94
00:05:09,480 --> 00:05:14,480
is a protocol or more specifically,

95
00:05:14,480 --> 00:05:18,000
a machine-readable language agnostic and

96
00:05:18,000 --> 00:05:21,200
open protocol for REST APIs.

97
00:05:21,200 --> 00:05:25,080
It's a way to describe RESTful web APIs

98
00:05:25,080 --> 00:05:29,080
in a machine-readable and language agnostic format.

99
00:05:29,080 --> 00:05:33,760
What do you get in return for that is community.

100
00:05:33,760 --> 00:05:36,600
Once things are machine-readable and language agnostic,

101
00:05:36,600 --> 00:05:38,960
many tools will pop up.

102
00:05:38,960 --> 00:05:40,520
You get an ecosystem,

103
00:05:40,520 --> 00:05:44,040
so you get a wider array of tools,

104
00:05:44,040 --> 00:05:46,400
you get them being interoperable,

105
00:05:46,400 --> 00:05:48,080
which is the last point.

106
00:05:48,080 --> 00:05:53,520
As far as the lineage or the composition of OpenAPI 3,

107
00:05:53,520 --> 00:05:57,400
what it is, is essentially JSON schema to

108
00:05:57,400 --> 00:05:59,560
describe the JSON objects that are

109
00:05:59,560 --> 00:06:02,120
being passed around over HTTP,

110
00:06:02,120 --> 00:06:04,040
and then some other,

111
00:06:04,040 --> 00:06:07,120
you can call it syntactic sugar

112
00:06:07,120 --> 00:06:13,120
to explain the rest of things that could happen in a web API.

113
00:06:14,760 --> 00:06:18,320
You might wonder how this relates to Swagger.

114
00:06:18,320 --> 00:06:19,960
Swagger actually is,

115
00:06:19,960 --> 00:06:23,280
you can think of it the grandfather of OpenAPI 3.

116
00:06:23,280 --> 00:06:27,480
Essentially, Swagger was the initial attempt to do this,

117
00:06:27,480 --> 00:06:31,120
and then it spun out into something that was more generalizable,

118
00:06:31,120 --> 00:06:33,600
which is what OpenAPI 3 is.

119
00:06:33,600 --> 00:06:39,840
Swagger and OpenAPI 3 are mostly compatible with each other.

120
00:06:39,840 --> 00:06:42,280
You find places where they aren't,

121
00:06:42,280 --> 00:06:44,640
and it's a little bit frustrating.

122
00:06:46,640 --> 00:06:53,560
Let's jump into a demo of some of the OpenAPI 3 tools.

123
00:06:56,320 --> 00:07:01,560
What I have here is Repolit.

124
00:07:01,560 --> 00:07:04,200
Some of you probably have worked with this, but essentially,

125
00:07:04,200 --> 00:07:08,920
I'm just going to go through six different tasks

126
00:07:08,920 --> 00:07:12,720
with different OpenAPI 3 tools.

127
00:07:12,720 --> 00:07:17,120
First, I'm going to start by taking an OpenAPI 3 specification,

128
00:07:17,120 --> 00:07:20,720
and then consuming it and converting all the endpoints

129
00:07:20,720 --> 00:07:24,720
into TypeScript interfaces.

130
00:07:24,720 --> 00:07:26,960
Then I'm going to talk a little bit

131
00:07:26,960 --> 00:07:29,320
about how you can create your own specification,

132
00:07:29,320 --> 00:07:30,480
what that looks like.

133
00:07:30,480 --> 00:07:35,480
Then I'm going to take an existing OpenAPI 3 specification

134
00:07:35,480 --> 00:07:37,480
and generate a mock server out of it.

135
00:07:37,480 --> 00:07:42,800
Based on the spec, I simply will run a mock server

136
00:07:42,800 --> 00:07:48,120
and then be able to run some commands against that over Postman.

137
00:07:48,120 --> 00:07:53,120
Then I will talk about how you can take an OpenAPI 3 spec

138
00:07:53,120 --> 00:07:55,480
and then turn it into a nice documentation

139
00:07:55,480 --> 00:08:00,400
that you can share with either your customers or friends,

140
00:08:00,400 --> 00:08:01,960
or colleagues.

141
00:08:01,960 --> 00:08:06,080
Then talk about generating a Postman collection

142
00:08:06,080 --> 00:08:08,080
out of an OpenAPI 3 spec.

143
00:08:08,080 --> 00:08:11,080
And finally, end with generating an SDK.

144
00:08:11,080 --> 00:08:14,880
This is specifically a TypeScript SDK.

145
00:08:14,880 --> 00:08:18,360
TypeScript is just what we've been using for the company.

146
00:08:18,360 --> 00:08:21,360
It's the thing I'm the most familiar with at the moment.

147
00:08:21,360 --> 00:08:23,560
Before I do any of that,

148
00:08:23,560 --> 00:08:28,200
let's just take a quick gander at one of these specifications.

149
00:08:28,200 --> 00:08:32,800
This one is one that I borrowed from this lady named Lorna.

150
00:08:32,800 --> 00:08:36,680
She's trying to make this API that allows you to retrieve

151
00:08:36,680 --> 00:08:39,480
planets in the solar system.

152
00:08:39,480 --> 00:08:43,040
In this API, you can see she's got

153
00:08:43,040 --> 00:08:46,000
an OpenAPI 3 specification version.

154
00:08:46,000 --> 00:08:49,280
She's got some description.

155
00:08:49,280 --> 00:08:52,040
Then here are the paths.

156
00:08:52,040 --> 00:08:57,600
There's a get for planets, so slash planets.

157
00:08:57,600 --> 00:09:01,240
Then there's a get with slash planets slash ID.

158
00:09:01,240 --> 00:09:03,240
Pretty straightforward.

159
00:09:03,240 --> 00:09:06,360
It describes what you can expect from the API.

160
00:09:06,360 --> 00:09:10,840
One nice thing here is that it also gives these examples

161
00:09:10,840 --> 00:09:12,400
of what the values can be.

162
00:09:12,400 --> 00:09:17,560
That comes in handy when you're trying to generate a mock server.

163
00:09:17,560 --> 00:09:23,160
Without further ado, we're going to start by consuming

164
00:09:23,160 --> 00:09:26,760
this OpenAPI spec, actually a different one from the planets one.

165
00:09:26,760 --> 00:09:29,240
This one's wordy.

166
00:09:29,240 --> 00:09:31,880
This is a CRM,

167
00:09:31,880 --> 00:09:34,720
a Customer Resource Management API.

168
00:09:34,720 --> 00:09:36,960
It's pretty long, but effectively,

169
00:09:36,960 --> 00:09:38,040
we're just going to take this,

170
00:09:38,040 --> 00:09:40,280
which is like multiple method API,

171
00:09:40,280 --> 00:09:41,800
and then just turn it into

172
00:09:41,800 --> 00:09:44,800
some schemas that we can use in TypeScript.

173
00:09:44,800 --> 00:09:48,920
We'll do that with this tool called OpenAPI TypeScript,

174
00:09:48,920 --> 00:09:52,960
which just takes any valid spec of OpenAPI,

175
00:09:52,960 --> 00:09:57,040
and then turns it into TypeScript schema.

176
00:09:57,040 --> 00:09:59,520
Let's copy this.

177
00:10:00,640 --> 00:10:02,840
We'll just run that.

178
00:10:02,840 --> 00:10:04,320
It might ask me to install this.

179
00:10:04,320 --> 00:10:06,000
Okay, that's fine.

180
00:10:09,520 --> 00:10:12,320
One second.

181
00:10:16,960 --> 00:10:20,600
I think I have a typo there.

182
00:10:20,600 --> 00:10:31,720
Sorry. That created the schema.ts file here.

183
00:10:31,720 --> 00:10:34,920
For each of the endpoints,

184
00:10:34,920 --> 00:10:38,000
I've generated these different interfaces in TypeScript.

185
00:10:38,000 --> 00:10:41,320
I've got the slash CRM slash leads endpoint,

186
00:10:41,320 --> 00:10:43,520
and that's a get operation,

187
00:10:43,520 --> 00:10:46,160
and there's also a post operation for that.

188
00:10:46,160 --> 00:10:49,120
Then I've got these different webhooks.

189
00:10:49,120 --> 00:10:51,920
I've got the interfaces that are specific

190
00:10:51,920 --> 00:10:56,200
to the regex that they're described with.

191
00:10:56,200 --> 00:11:01,240
For example, this needs to be ISO format for time,

192
00:11:01,240 --> 00:11:03,600
and then I've got all that that just read

193
00:11:03,600 --> 00:11:06,000
directly from that OpenAPI spec.

194
00:11:06,000 --> 00:11:07,720
That just continues forever.

195
00:11:07,720 --> 00:11:12,320
It's a pretty long API, so I won't make that too long.

196
00:11:12,320 --> 00:11:16,280
Pretty simple. This would work in any language.

197
00:11:16,280 --> 00:11:18,360
There's tooling for this all

198
00:11:18,360 --> 00:11:20,520
because you have the specification

199
00:11:20,520 --> 00:11:22,560
that describes this API.

200
00:11:23,720 --> 00:11:29,080
We'll skip through this. We already talked about this API.

201
00:11:29,080 --> 00:11:31,280
We'll move on to mocking.

202
00:11:31,280 --> 00:11:38,200
We're going to mock that planets API that I just showed.

203
00:11:38,200 --> 00:11:49,080
Let me install that too.

204
00:11:49,080 --> 00:11:51,680
What this is going to do is it's going to spin up a web server

205
00:11:51,680 --> 00:11:57,880
on port 8080, and then in Repolit,

206
00:11:57,880 --> 00:12:03,320
basically, we'll forward port 8080 to this domain here.

207
00:12:03,320 --> 00:12:06,960
From that, I can make a get request against this.

208
00:12:06,960 --> 00:12:08,760
I'll come over here to the postman

209
00:12:08,760 --> 00:12:11,160
and then make a get against planets.

210
00:12:11,160 --> 00:12:16,800
Then you'll see here that I get a planet Saturn back.

211
00:12:16,800 --> 00:12:20,840
Then also, there's another API endpoint where I could do an ID,

212
00:12:20,840 --> 00:12:24,280
and so I'll also get planet back for that.

213
00:12:24,280 --> 00:12:27,040
Simply, I didn't write any code,

214
00:12:27,040 --> 00:12:29,200
and then I've got an API that just works

215
00:12:29,200 --> 00:12:30,640
against that specification,

216
00:12:30,640 --> 00:12:32,400
which could come in handy if you're working

217
00:12:32,400 --> 00:12:35,800
with APIs like I am all day.

218
00:12:35,800 --> 00:12:38,600
All right, so let's do the next one.

219
00:12:38,600 --> 00:12:43,120
So, okay.

220
00:12:43,120 --> 00:12:47,280
So, next, we're going to spin up some documentation.

221
00:12:47,280 --> 00:12:51,680
So, I'm going to use this tool called Redocly,

222
00:12:51,680 --> 00:12:54,240
which takes an open API specification,

223
00:12:54,240 --> 00:12:56,960
all the examples, and then provides a nice page

224
00:12:56,960 --> 00:12:59,880
for you to display your REST API.

225
00:12:59,880 --> 00:13:22,480
So, let's do that.

226
00:13:22,480 --> 00:13:28,040
Okay, so.

227
00:13:28,040 --> 00:13:31,600
Okay, so basically, this whole API is described in that doc,

228
00:13:31,600 --> 00:13:34,440
and then what you get is this page here.

229
00:13:34,440 --> 00:13:39,200
So, it has all the notes, explains the headers in your API,

230
00:13:39,200 --> 00:13:42,800
API keys, and then if you come down to the bottom here

231
00:13:42,800 --> 00:13:44,720
where the actual API is,

232
00:13:44,720 --> 00:13:48,080
so it'll give you any kind of authorization parameters.

233
00:13:48,080 --> 00:13:49,760
It'll give you some examples of code,

234
00:13:49,760 --> 00:13:53,000
so you can do Python or Java,

235
00:13:53,000 --> 00:13:54,840
and it will automatically generate

236
00:13:54,840 --> 00:13:56,680
how this code should look.

237
00:13:56,680 --> 00:13:58,720
It gives you all your responses,

238
00:13:58,720 --> 00:14:04,720
and it's pretty solid for just auto-generating it,

239
00:14:04,720 --> 00:14:08,800
and as you get used to using Redocly,

240
00:14:08,800 --> 00:14:11,520
you can generate nicer and nicer pages,

241
00:14:11,520 --> 00:14:13,760
and Redocly isn't the only tool that works

242
00:14:13,760 --> 00:14:15,240
with these open API 3 specs.

243
00:14:15,240 --> 00:14:17,680
There's several, but this is kind of one of the nicest

244
00:14:17,680 --> 00:14:22,480
and sort of easiest to use ones, so it's one that I recommend.

245
00:14:22,480 --> 00:14:27,320
All right, so let's keep moving here.

246
00:14:27,320 --> 00:14:31,120
So, the next one, we're gonna generate a Postman collection,

247
00:14:31,120 --> 00:14:33,920
so let's see.

248
00:14:33,920 --> 00:14:35,160
Let's actually just close this web view.

249
00:14:35,160 --> 00:14:36,720
I won't need that anymore.

250
00:14:36,720 --> 00:14:41,600
Move this over here, and okay,

251
00:14:41,600 --> 00:14:44,040
so we're gonna take that same example spec

252
00:14:44,040 --> 00:14:49,320
that has a CRM API and make a Postman collection,

253
00:14:49,320 --> 00:14:53,320
so then we'll import that into Postman afterward.

254
00:15:06,880 --> 00:15:10,840
Okay, so that was saved in this temp directory,

255
00:15:10,840 --> 00:15:15,320
so we got temp converted, CRM API.json,

256
00:15:15,320 --> 00:15:20,520
so we'll download that, and then open up Postman,

257
00:15:20,520 --> 00:15:28,840
import new collection, and sweet.

258
00:15:28,840 --> 00:15:32,920
So, now we've got that full API in Postman,

259
00:15:32,920 --> 00:15:37,240
and then you can add any of these default values as well

260
00:15:37,240 --> 00:15:39,280
and add a Postman environment if needed,

261
00:15:39,280 --> 00:15:41,920
so that's an easy way to get started

262
00:15:41,920 --> 00:15:46,440
if you were trying to consume a new API.

263
00:15:46,440 --> 00:15:50,240
Okay, and finally, we're going to generate this SDK,

264
00:15:50,240 --> 00:15:53,640
so we're gonna take that same example spec

265
00:15:53,640 --> 00:15:58,320
and then generate an SDK for TypeScript from it.

266
00:16:06,600 --> 00:16:09,800
Okay, so now we've got this SDK.ts,

267
00:16:09,800 --> 00:16:14,440
so this is effectively an SDK that you can import

268
00:16:14,440 --> 00:16:17,960
and start using that implements this entire API,

269
00:16:17,960 --> 00:16:21,560
so it's got all the types, all of the methods,

270
00:16:21,560 --> 00:16:25,720
and exactly to the specification that was written.

271
00:16:25,720 --> 00:16:27,320
So, let's go back here.

272
00:16:30,600 --> 00:16:32,320
Okay, so these are all the benefits

273
00:16:32,320 --> 00:16:34,800
that you can get from OpenAPI 3,

274
00:16:34,800 --> 00:16:37,480
so testing, being able to mock,

275
00:16:37,480 --> 00:16:40,600
being able to use the integrations in the ecosystem,

276
00:16:40,600 --> 00:16:42,680
and I think the most important, the sanity,

277
00:16:42,680 --> 00:16:45,560
so having a way to describe an API

278
00:16:45,560 --> 00:16:49,280
and letting kind of all the heterogeneity happen

279
00:16:49,280 --> 00:16:51,280
from however creative people want to be

280
00:16:51,280 --> 00:16:52,480
in defining their APIs,

281
00:16:52,480 --> 00:16:54,480
but still having a way to describe it

282
00:16:54,480 --> 00:16:56,240
has made my life a lot easier.

283
00:16:56,240 --> 00:16:59,840
Being able to import the Stripe API as a spec

284
00:16:59,840 --> 00:17:03,960
or the Plaid API just makes my life 100 times easier,

285
00:17:03,960 --> 00:17:05,880
and so I really, really love this tool,

286
00:17:05,880 --> 00:17:07,160
and if you haven't used it,

287
00:17:07,160 --> 00:17:08,800
I hope that you get a chance to,

288
00:17:08,800 --> 00:17:36,800
and that's it for me.

