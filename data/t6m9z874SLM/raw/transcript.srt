1
00:00:00,000 --> 00:00:06,700
I'm the chief scientist at Motif Analytics, and I'm going to tell a story about something

2
00:00:06,700 --> 00:00:12,120
that we've been working on and basically my like ex post rationalization for why what

3
00:00:12,120 --> 00:00:14,000
we did made sense.

4
00:00:14,000 --> 00:00:18,480
And I hope it sort of portrays like a lesson that I've learned and that like actually what

5
00:00:18,480 --> 00:00:21,960
we're doing does make sense, but maybe it doesn't and maybe I'm just making up some

6
00:00:21,960 --> 00:00:22,960
excuses.

7
00:00:22,960 --> 00:00:26,080
So this is a David Byrne quote that I've adapted.

8
00:00:26,080 --> 00:00:30,000
I joined Motif in July, we started working on sequence analytics, and I found myself

9
00:00:30,000 --> 00:00:34,640
at this beautiful startup with all these smart people and we wrote a query language.

10
00:00:34,640 --> 00:00:37,520
And that's what we've been working on for the last few months and I'm not ready to show

11
00:00:37,520 --> 00:00:38,520
it to you today.

12
00:00:38,520 --> 00:00:43,760
And this isn't going to be a Motif commercial as much as I would love to do that.

13
00:00:43,760 --> 00:00:47,200
But it is a little bit questionable, like should you write a query language and everyone

14
00:00:47,200 --> 00:00:48,200
loves SQL.

15
00:00:48,200 --> 00:00:51,280
And I know a lot of people don't like new query languages.

16
00:00:51,280 --> 00:00:55,440
This is somebody that I really respect a lot, Eric Bernardson, saying I don't really like

17
00:00:55,440 --> 00:00:57,880
software that invents its own query language.

18
00:00:57,880 --> 00:01:02,320
We would joke at the company that like maybe our product is dead on arrival because no

19
00:01:02,320 --> 00:01:03,960
one's going to want to learn a new thing.

20
00:01:03,960 --> 00:01:05,960
And smart kids say no to DSLs.

21
00:01:05,960 --> 00:01:10,560
Which is like, I just love this graphic that he included.

22
00:01:10,560 --> 00:01:15,200
And you know, like once you decide to go down this road, every time you make a bad choice

23
00:01:15,200 --> 00:01:17,560
becomes harder to make a good one.

24
00:01:17,560 --> 00:01:20,880
And so you can end up in a bad state if you make a bad choice at the very beginning of

25
00:01:20,880 --> 00:01:21,880
your project.

26
00:01:21,880 --> 00:01:24,800
And so new query language may be a terrible idea.

27
00:01:24,800 --> 00:01:28,560
I'm going to try to justify to you why we might need that.

28
00:01:28,560 --> 00:01:32,240
And then like how why you also might need to be thinking about different kinds of query

29
00:01:32,240 --> 00:01:33,240
languages.

30
00:01:33,240 --> 00:01:35,760
So here's the setup for Motif.

31
00:01:35,760 --> 00:01:37,320
And I'm not going to belabor it too much.

32
00:01:37,320 --> 00:01:43,000
But roughly we think about user behavior on a website or an app as a sequence of events

33
00:01:43,000 --> 00:01:48,400
that occur that have a user ID, a timestamp, an event name, possibly some other metadata.

34
00:01:48,400 --> 00:01:52,360
And the kinds of questions that we like to ask are what happens after a user does something?

35
00:01:52,360 --> 00:01:54,960
What happens before something happens to a user?

36
00:01:54,960 --> 00:01:56,240
And then what happens between?

37
00:01:56,240 --> 00:01:58,720
These are what we call like sequential questions.

38
00:01:58,720 --> 00:02:01,200
They have a certain flavor to them.

39
00:02:01,200 --> 00:02:06,000
And so we can lay this out left to right on a timeline and say, OK, this is the kind of

40
00:02:06,000 --> 00:02:08,920
golden path for a user of a video streaming service.

41
00:02:08,920 --> 00:02:11,080
So they started a search page.

42
00:02:11,080 --> 00:02:12,080
They see some search results.

43
00:02:12,080 --> 00:02:13,080
They click on that.

44
00:02:13,080 --> 00:02:17,720
They preview the video, start watching, and finish watching.

45
00:02:17,720 --> 00:02:21,360
And a very natural set of questions to ask are things like, how many users make it through

46
00:02:21,360 --> 00:02:23,120
this process?

47
00:02:23,120 --> 00:02:25,160
Are they getting stuck at various times?

48
00:02:25,160 --> 00:02:26,320
And where do they get stuck?

49
00:02:26,320 --> 00:02:29,000
And where do they stop using your site?

50
00:02:29,000 --> 00:02:34,760
Do they take detours into doing something else that isn't on this happy path?

51
00:02:34,760 --> 00:02:38,480
And does it depend on things that happened earlier in the sequence of various ways, like

52
00:02:38,480 --> 00:02:43,000
say maybe what device they're using or what kind of connection that they're on?

53
00:02:43,000 --> 00:02:45,880
And is it something that we could possibly fix?

54
00:02:45,880 --> 00:02:49,560
And so this is a space of questions that's really rich and important for people.

55
00:02:49,560 --> 00:02:53,040
And I think we all are kind of interested in answering questions like these in our jobs

56
00:02:53,040 --> 00:02:54,040
often.

57
00:02:54,040 --> 00:02:59,120
One person in particular, T.H. Murphy, who's a friend, and he gave me permission to share

58
00:02:59,120 --> 00:03:03,960
some of his slides from his Snowflake talk, spent a long time thinking about this and

59
00:03:03,960 --> 00:03:04,960
working on it.

60
00:03:04,960 --> 00:03:08,600
So he has this talk, Funnel Analysis and SQL from Start to Finish.

61
00:03:08,600 --> 00:03:11,640
And I didn't actually get to see the talk in person, so I can't claim it was a great

62
00:03:11,640 --> 00:03:12,640
talk.

63
00:03:12,640 --> 00:03:13,640
I'm sure it was.

64
00:03:13,640 --> 00:03:15,480
But the slides are great, and they're very informative.

65
00:03:15,480 --> 00:03:20,760
He basically spent a long time prototyping three ideas, and then there's a fourth one

66
00:03:20,760 --> 00:03:24,200
that I won't include because it's inconvenient for my point.

67
00:03:24,200 --> 00:03:27,680
But he's got three approaches to solving this problem using SQL.

68
00:03:27,680 --> 00:03:33,080
And so the idea is we want to count how many users make it from A to B to C to D, possibly

69
00:03:33,080 --> 00:03:38,660
with time gaps in between that we want to constrain, and that we want to kind of figure

70
00:03:38,660 --> 00:03:41,600
out how to analyze this funnel.

71
00:03:41,600 --> 00:03:42,720
And there's three approaches to it.

72
00:03:42,720 --> 00:03:47,240
There's a join approach, a window function approach, and a regular expressions approach.

73
00:03:47,240 --> 00:03:52,120
And they have different characteristics, like max k is one of them, which is like this is

74
00:03:52,120 --> 00:03:56,280
how many steps that you're actually capable of counting in a reasonable amount of time.

75
00:03:56,280 --> 00:03:58,640
And so we can see for join, it's like a small number.

76
00:03:58,640 --> 00:04:02,120
Then there's performance, which is like how much data we're able to process.

77
00:04:02,120 --> 00:04:06,480
And then very importantly, there's this column on ease of use, and Tej very conveniently has

78
00:04:06,480 --> 00:04:07,480
this star rating system.

79
00:04:07,480 --> 00:04:11,040
I don't know if it's like out of five stars or out of three.

80
00:04:11,040 --> 00:04:14,560
And perhaps he said this in the talk, but this is kind of roughly what we think about

81
00:04:14,560 --> 00:04:18,160
a lot as analysts, is like how do we solve a problem in SQL?

82
00:04:18,160 --> 00:04:21,080
And then what kind of characteristics will that solution have?

83
00:04:21,080 --> 00:04:24,920
So you can think about like, what are we trying to do when we do sequence analytics in SQL?

84
00:04:24,920 --> 00:04:27,520
And why might this be a little bit challenging to think about how to do?

85
00:04:27,520 --> 00:04:32,600
Well, the left join approach is like taking a table and doing joins onto the same table.

86
00:04:32,600 --> 00:04:36,240
And you could even do like a recursive join if you wanted to, and create like a bunch

87
00:04:36,240 --> 00:04:40,040
of columns for all the different sequence elements.

88
00:04:40,040 --> 00:04:44,160
And this is what Edgar Codd, the inventor of the relational model, would want you to

89
00:04:44,160 --> 00:04:48,000
do because he doesn't want you to add window functions or denormalize your data in any

90
00:04:48,000 --> 00:04:49,360
way.

91
00:04:49,360 --> 00:04:51,880
But this is very not performant because you have to do joins.

92
00:04:51,880 --> 00:04:57,040
And for some reason, databases are bad at doing many joins, despite that that's what

93
00:04:57,040 --> 00:04:58,760
they're designed for.

94
00:04:58,760 --> 00:05:00,560
You could also use window functions.

95
00:05:00,560 --> 00:05:04,160
So the predicate now would, instead of being across columns like in these purple boxes,

96
00:05:04,160 --> 00:05:06,340
it would be across rows.

97
00:05:06,340 --> 00:05:09,680
And this is really kind of getting at the heart of what we're trying to do here is like

98
00:05:09,680 --> 00:05:14,280
apply conditions or predicates that span multiple rows in the data or multiple relations.

99
00:05:14,280 --> 00:05:18,360
And so we partition, order the data, and then we can do this window function approach.

100
00:05:18,360 --> 00:05:24,140
Or we could denormalize the data and create a special column that has an aggregate type.

101
00:05:24,140 --> 00:05:27,680
And then that aggregate type, we could write like UDFs or something like that to apply

102
00:05:27,680 --> 00:05:28,680
to that.

103
00:05:28,680 --> 00:05:31,800
And in Tiege's approach, it's like, oh, we'll just use regular expressions.

104
00:05:31,800 --> 00:05:33,520
We'll construct strings and use regular expressions.

105
00:05:33,520 --> 00:05:38,400
And that's another kind of like way that we might think about solving this problem.

106
00:05:38,400 --> 00:05:43,040
At the end of his approach, he sort of like motivates these things plus a fourth approach.

107
00:05:43,040 --> 00:05:47,040
And then like several months later, I saw him tweet this last night.

108
00:05:47,040 --> 00:05:49,720
This is like shows how late I was working on my slides.

109
00:05:49,720 --> 00:05:52,160
I never want to write a funnel in SQL ever again.

110
00:05:52,160 --> 00:05:56,800
So this is the person that I know who spent the most time working on funnels in SQL.

111
00:05:56,800 --> 00:06:00,120
Maybe it's because he spent so much time on it, but he knows the most about how to do

112
00:06:00,120 --> 00:06:01,560
it and how it could be done.

113
00:06:01,560 --> 00:06:05,360
And he doesn't think it's particularly fun to do or usable.

114
00:06:05,360 --> 00:06:10,440
I think they want to get to the point here of like, just because something is possible

115
00:06:10,440 --> 00:06:14,640
to do in a query language or in any language for that matter, it doesn't mean that it's

116
00:06:14,640 --> 00:06:16,660
likely that people will do it.

117
00:06:16,660 --> 00:06:17,660
And this is an important point.

118
00:06:17,660 --> 00:06:22,080
It's just not about like whether something is capable of doing something.

119
00:06:22,080 --> 00:06:24,720
It's about whether a user would practically do something.

120
00:06:24,720 --> 00:06:29,320
And we have Tiege Murphy, the expert on funnel analysis, telling us that he never wants to

121
00:06:29,320 --> 00:06:30,320
do it again.

122
00:06:30,320 --> 00:06:35,320
It's a bad sign for whether people will be doing funnel analysis in their jobs.

123
00:06:35,320 --> 00:06:39,040
I want to make the point that it's not the relational model that's the problem here.

124
00:06:39,040 --> 00:06:40,520
It's a fully expressive model.

125
00:06:40,520 --> 00:06:42,640
I mean, like, you know, Edgar Codd is right.

126
00:06:42,640 --> 00:06:45,320
Like relational model can solve this problem.

127
00:06:45,320 --> 00:06:49,400
And the events are perfectly well represented as a relation.

128
00:06:49,400 --> 00:06:54,660
So it's very reasonable to think about like, why should SQL not be capable of doing this

129
00:06:54,660 --> 00:06:56,400
very easily?

130
00:06:56,400 --> 00:06:59,120
And like, why should what should we be doing instead?

131
00:06:59,120 --> 00:07:02,400
And another important point to make here is that this is an analysis we're not going to

132
00:07:02,400 --> 00:07:03,640
probably write one time.

133
00:07:03,640 --> 00:07:06,560
There's this illusion that like, oh, we write this query and walk away from it.

134
00:07:06,560 --> 00:07:10,400
But actually, we all know that when we write a query that we end up tweaking it and making

135
00:07:10,400 --> 00:07:14,080
changes and that the funnel might change or be more complicated than we first, you know,

136
00:07:14,080 --> 00:07:17,120
first acknowledge and that this is an iterative process.

137
00:07:17,120 --> 00:07:19,520
And so we're going to need to solve this in maybe a different way.

138
00:07:19,520 --> 00:07:21,080
And I want to be open minded about that.

139
00:07:21,080 --> 00:07:24,320
And that's where that foolish consistency is the hobgoblin of little minds.

140
00:07:24,320 --> 00:07:27,960
So like, this is the only tool I'm allowed to use is the one that I already have is a

141
00:07:27,960 --> 00:07:31,120
little bit of a foolish consistency.

142
00:07:31,120 --> 00:07:35,640
So we have three possible things that we really want to boxes that we want to tick.

143
00:07:35,640 --> 00:07:39,040
We want to have completeness, which means like any possible funnel question could be

144
00:07:39,040 --> 00:07:40,040
answered.

145
00:07:40,040 --> 00:07:44,840
And it might be, it might be possible that some things are not possible in SQL, I don't

146
00:07:44,840 --> 00:07:48,920
want to make that claim, because I know someone will immediately rebut it.

147
00:07:48,920 --> 00:07:52,440
So I'm not going to say that there's a there's a thing that you can't do in SQL, unless I

148
00:07:52,440 --> 00:07:55,240
want someone to actually solve that problem.

149
00:07:55,240 --> 00:07:58,400
But I do think that expressiveness is a really important criterion here.

150
00:07:58,400 --> 00:08:02,480
It's like, even if it were possible to do an analysis, do I need an expert to do it?

151
00:08:02,480 --> 00:08:05,120
Could I do it in a reasonable amount of time?

152
00:08:05,120 --> 00:08:08,560
And then there's this like efficiency question, which Tej is very concerned with is like,

153
00:08:08,560 --> 00:08:13,000
could it be done quickly or at all on the large amount of data that we might have?

154
00:08:13,000 --> 00:08:17,880
So we want to kind of like, tick these three boxes if we can.

155
00:08:17,880 --> 00:08:21,560
So let's think like abstractly about what are we really trying to do when we design

156
00:08:21,560 --> 00:08:26,160
this procedure is like we have input data, and then our job is to fill this hole, the

157
00:08:26,160 --> 00:08:30,000
dashed line here and create some output data that is the answer to our question.

158
00:08:30,000 --> 00:08:31,720
So break this down into three phases.

159
00:08:31,720 --> 00:08:36,320
There's this expressing phase, where I go from intention to query syntax, and you can

160
00:08:36,320 --> 00:08:39,080
see all the joins that I have to do to get it to work.

161
00:08:39,080 --> 00:08:43,320
And then the database system will execute that query, produce a result, and then I will

162
00:08:43,320 --> 00:08:46,400
look at the feedback and like verify that it is complete.

163
00:08:46,400 --> 00:08:51,560
And so you can see like all three steps together, we get a core loop for an analyst who's working

164
00:08:51,560 --> 00:08:52,800
through a problem.

165
00:08:52,800 --> 00:08:53,800
I have an intention.

166
00:08:53,800 --> 00:08:55,000
It's like, this is what I want.

167
00:08:55,000 --> 00:08:56,600
This is the question that I'm answering.

168
00:08:56,600 --> 00:08:57,600
I want to answer.

169
00:08:57,600 --> 00:09:00,360
I have my human time that I spent getting to syntax.

170
00:09:00,360 --> 00:09:02,760
I have machine time getting from syntax to result.

171
00:09:02,760 --> 00:09:06,360
And then I have human time sort of spending time on the result and verifying that it's

172
00:09:06,360 --> 00:09:08,120
the right thing that I want.

173
00:09:08,120 --> 00:09:13,440
And getting through this loop quickly is really the name of the game for analytics productivity.

174
00:09:13,440 --> 00:09:16,160
And if we could do this quickly, then we could solve a lot of problems.

175
00:09:16,160 --> 00:09:19,560
A lot of people will say, hey, the machine time actually does matter.

176
00:09:19,560 --> 00:09:24,240
And I think that often we're just playing in different areas of this two dimensional

177
00:09:24,240 --> 00:09:29,720
space of how often we spend writing new queries versus how often we spend executing new queries.

178
00:09:29,720 --> 00:09:32,680
And I think a lot of people will think about, oh, like the query needs to be efficient.

179
00:09:32,680 --> 00:09:33,840
So it must be written in SQL.

180
00:09:33,840 --> 00:09:37,040
Well, that's people who want to work in the upper left hand quadrant where they want a

181
00:09:37,040 --> 00:09:41,400
mature data pipeline where it's very repeatable and reliable.

182
00:09:41,400 --> 00:09:45,160
I am very interested in this bottom right hand quadrant where we're interactively working

183
00:09:45,160 --> 00:09:49,360
with data and reframing our questions on a regular basis in order to get the answer that

184
00:09:49,360 --> 00:09:52,640
we really want and verify that it's correct.

185
00:09:52,640 --> 00:09:56,360
And there might be two paths up into this like holy grail top quadrant where you're

186
00:09:56,360 --> 00:10:00,680
doing a lot of interactive work and also very fast on the machine time.

187
00:10:00,680 --> 00:10:04,440
And I think it's plausible that we'd start from interactive analytics and figure out

188
00:10:04,440 --> 00:10:08,440
how to scale something from there rather than start with a really mature thing that answers

189
00:10:08,440 --> 00:10:13,080
one question well and expand the scope of it, say, using something like templates.

190
00:10:13,080 --> 00:10:15,600
All right.

191
00:10:15,600 --> 00:10:18,480
So I got a little recap where there's the ProSQL side.

192
00:10:18,480 --> 00:10:22,160
I'm not even going to make the argument because everyone's already made it online and told

193
00:10:22,160 --> 00:10:23,840
me not to even give this talk.

194
00:10:23,840 --> 00:10:24,840
SQL is great.

195
00:10:24,840 --> 00:10:26,320
It's fast and scalable.

196
00:10:26,320 --> 00:10:28,720
The data I have are already easily queryable.

197
00:10:28,720 --> 00:10:33,480
And of course, everyone can already read and fix my SQL queries, which I don't think that's

198
00:10:33,480 --> 00:10:34,480
actually true.

199
00:10:34,480 --> 00:10:36,880
You can see it's an anti-SQL point too.

200
00:10:36,880 --> 00:10:39,920
And also, people have figured out how to analyze funnels in SQL.

201
00:10:39,920 --> 00:10:45,640
So it's not impossible, but it's an awkward fit and human time is important.

202
00:10:45,640 --> 00:10:49,280
And key to my point here is that if it takes a long time, we might not ever even do it.

203
00:10:49,280 --> 00:10:52,840
And there'll be questions that are left unanswered that are important for our business.

204
00:10:52,840 --> 00:10:56,120
And so just because something can be solved in SQL doesn't mean it's important to our

205
00:10:56,120 --> 00:10:57,120
business.

206
00:10:57,120 --> 00:11:00,640
And some things that are hard to solve in SQL might actually be very difficult, but

207
00:11:00,640 --> 00:11:04,520
it might actually be very important for what we need to learn.

208
00:11:04,520 --> 00:11:05,520
Okay.

209
00:11:05,520 --> 00:11:11,600
So next phase of the talk is how to not use SQL.

210
00:11:11,600 --> 00:11:18,400
And actually, I changed the name of the slide at the last minute to how to use not SQL because

211
00:11:18,400 --> 00:11:21,800
I don't think it's about replacing SQL whole hog.

212
00:11:21,800 --> 00:11:25,320
I don't really ever want to claim that I'm going to invent a new query language that's

213
00:11:25,320 --> 00:11:28,120
better than SQL in all ways.

214
00:11:28,120 --> 00:11:32,520
There's no free lunch, but we need to think about building systems that are complimentary

215
00:11:32,520 --> 00:11:35,840
to the expressive power of SQL in other ways.

216
00:11:35,840 --> 00:11:39,960
And that it will be a thing that extends our superpowers and gives us like ability to answer

217
00:11:39,960 --> 00:11:46,400
new questions, but can compose well with the SQL queries that we're already writing.

218
00:11:46,400 --> 00:11:52,880
So here's my rough diagram of an analytics data, like a whole data work and the end from

219
00:11:52,880 --> 00:11:56,880
the raw data all the way to the things that users really care about.

220
00:11:56,880 --> 00:12:00,480
I know a lot of people online will probably quibble about all the boxes and arrows here,

221
00:12:00,480 --> 00:12:03,040
but just all models are wrong.

222
00:12:03,040 --> 00:12:05,720
This one serves my purpose.

223
00:12:05,720 --> 00:12:06,720
And okay.

224
00:12:06,720 --> 00:12:08,460
So we've got the stuff on the very far right.

225
00:12:08,460 --> 00:12:12,000
This is the impact that we're having from the data.

226
00:12:12,000 --> 00:12:13,640
And then we have the raw data all the way on the left.

227
00:12:13,640 --> 00:12:18,560
And any analysis that we do, anything that builds value as a path along this graph in

228
00:12:18,560 --> 00:12:22,960
some ways, including possibly loops where we do something more than once.

229
00:12:22,960 --> 00:12:26,880
So if we could think about different roles here, like here's an ML engineer who queries

230
00:12:26,880 --> 00:12:31,120
relational data with Python and then trains a model and then serves the model and the

231
00:12:31,120 --> 00:12:36,240
model drives impact by powering some beautiful new feature.

232
00:12:36,240 --> 00:12:40,520
We got the business analyst who queries the relational data that's already been turned

233
00:12:40,520 --> 00:12:45,600
into an OLAP cube with a BI tool, creates a plot and convinces the CEO that they're

234
00:12:45,600 --> 00:12:48,440
going to do a bad course of action.

235
00:12:48,440 --> 00:12:52,120
Or the data engineer who is thinking about how are we going to extract the load, the

236
00:12:52,120 --> 00:12:53,760
raw data and get it into relational data?

237
00:12:53,760 --> 00:12:57,760
And how are we going to run the pipelines, which are a batch of SQL queries that we're

238
00:12:57,760 --> 00:13:01,560
going to run on the relational data and continue to write new relational data into the relational

239
00:13:01,560 --> 00:13:04,240
data store.

240
00:13:04,240 --> 00:13:08,580
So everyone sort of has a place in this graph and it's usually like a path through it that

241
00:13:08,580 --> 00:13:12,680
you are responsible for and that you think about.

242
00:13:12,680 --> 00:13:16,240
But the heart of the graph is the relational data.

243
00:13:16,240 --> 00:13:18,120
It's like, this is the heart of our organization.

244
00:13:18,120 --> 00:13:22,120
And I used to study social networks, we call this a brokerage position of brokerage and

245
00:13:22,120 --> 00:13:23,120
social networks.

246
00:13:23,120 --> 00:13:26,760
It means that to solve any problem, to communicate between any two nodes in this graph, it's

247
00:13:26,760 --> 00:13:30,760
very likely that you're going to have to go through the relational data.

248
00:13:30,760 --> 00:13:34,280
And so this is an important kind of like design consideration when you're building a new thing.

249
00:13:34,280 --> 00:13:38,960
It's like if it doesn't read from and write to relational data, then it might be dead

250
00:13:38,960 --> 00:13:43,920
on arrival, like the query language that we built.

251
00:13:43,920 --> 00:13:49,320
So this is the inner loop, is a set of functions that we're going to run that consume relational

252
00:13:49,320 --> 00:13:51,560
data and emit relational data.

253
00:13:51,560 --> 00:13:55,800
And typically this is done with SQL or with Python and R in my experience, maybe less

254
00:13:55,800 --> 00:13:56,800
often.

255
00:13:56,800 --> 00:13:58,120
SQL is the most common case.

256
00:13:58,120 --> 00:13:59,720
Python and R can do this too.

257
00:13:59,720 --> 00:14:00,720
You can read from it.

258
00:14:00,720 --> 00:14:04,560
There's lots of connectors for databases and then you can write back to the database, very

259
00:14:04,560 --> 00:14:09,320
common pattern at both of the companies that I work for, Lyft and Facebook.

260
00:14:09,320 --> 00:14:14,360
And one way that I like to think about this is that there's this abstract space of relational

261
00:14:14,360 --> 00:14:18,560
data and each of these operations that we're doing, it's like a path that we're creating

262
00:14:18,560 --> 00:14:23,160
between two points where the starting point is the data that we have and the end point

263
00:14:23,160 --> 00:14:26,760
is the data that we'd like to have, which is like the answer to the question.

264
00:14:26,760 --> 00:14:31,000
And so by looping through this loop many, many times, we construct a path that gets

265
00:14:31,000 --> 00:14:32,840
us to the data that we want.

266
00:14:32,840 --> 00:14:36,040
So a chain of these operations is a solution to the problem that we're trying to solve

267
00:14:36,040 --> 00:14:39,400
when we're doing analytics tasks.

268
00:14:39,400 --> 00:14:41,600
So how can we add a new functionality?

269
00:14:41,600 --> 00:14:43,520
How can we be more expressive than SQL?

270
00:14:43,520 --> 00:14:47,880
We need to remove the SQL node and replace it with something else.

271
00:14:47,880 --> 00:14:52,980
And so here are three broad strategies that I've seen in practice for doing this.

272
00:14:52,980 --> 00:14:55,920
And so the first one is kind of like the one that I already talked about, which is like

273
00:14:55,920 --> 00:14:59,920
taking the data, putting it in R or Python, working with it in pandas or dplyr, which

274
00:14:59,920 --> 00:15:03,480
know how to deal with relational data and can then like emit relational data.

275
00:15:03,480 --> 00:15:07,720
So this sort of like substitutes out a SQL execution environment for something else,

276
00:15:07,720 --> 00:15:11,240
but it still conforms to the interface that we care about.

277
00:15:11,240 --> 00:15:14,520
Then there's this like new breed of thing that I'm seeing, which is like to transpile

278
00:15:14,520 --> 00:15:17,060
a language into SQL.

279
00:15:17,060 --> 00:15:21,660
So Malloy does this and prequel does this, which is like, take, take a query that is

280
00:15:21,660 --> 00:15:26,440
easier to write in some language and make it into a SQL query that could be like a big

281
00:15:26,440 --> 00:15:30,360
ginormous thing that we're really worried about whether it's going to work, but it will

282
00:15:30,360 --> 00:15:33,800
because it's a transpiler and it can guarantee correctness.

283
00:15:33,800 --> 00:15:37,080
This is also an attractive strategy because you can add this for expressivity, but get

284
00:15:37,080 --> 00:15:42,800
all the benefits of using SQL under the hood and using the same execution environment.

285
00:15:42,800 --> 00:15:47,240
And then what I'm going to talk about is actually this, like convert it into a new space and

286
00:15:47,240 --> 00:15:50,500
then operate it within the new space and then convert it back into relational data.

287
00:15:50,500 --> 00:15:53,360
So we need two things is the box is a noun.

288
00:15:53,360 --> 00:15:55,500
It's a useful representation for the data.

289
00:15:55,500 --> 00:15:59,620
That's not relational data, a converter to and from that thing.

290
00:15:59,620 --> 00:16:04,680
And then some expressive set of operations that work within that space.

291
00:16:04,680 --> 00:16:12,280
So here's my topological analysis of this is that we have relational data space on the

292
00:16:12,280 --> 00:16:15,340
left-hand side, and we have some alternative representation.

293
00:16:15,340 --> 00:16:16,800
And so this is how we do this.

294
00:16:16,800 --> 00:16:21,080
We have a round trip that we're going to take this difficult or expensive transformation

295
00:16:21,080 --> 00:16:26,040
that we'd like to make in space X, but that we can actually do in space Y under some sort

296
00:16:26,040 --> 00:16:30,040
of operations that we actually understand and are debuggable and easy to express.

297
00:16:30,040 --> 00:16:34,240
And then we're going to round trip it back using the converter.

298
00:16:34,240 --> 00:16:36,080
So this doesn't sound like a crazy idea.

299
00:16:36,080 --> 00:16:39,360
Actually I think I've seen this play out in practice in kind of informal ways.

300
00:16:39,360 --> 00:16:43,160
And there's at least four different kinds of intermediate representations that I think

301
00:16:43,160 --> 00:16:44,160
make sense here.

302
00:16:44,160 --> 00:16:45,160
One is graphs.

303
00:16:45,160 --> 00:16:49,320
Graphs are sort of very hard to query in SQL, especially along paths.

304
00:16:49,320 --> 00:16:52,280
But if you convert something to a graph, it's very easy to think about how to solve graph

305
00:16:52,280 --> 00:16:56,480
query problems in some other way, say with a language like Cypher.

306
00:16:56,480 --> 00:16:59,940
And then you could convert a graph back to SQL quite easily because they're very easy

307
00:16:59,940 --> 00:17:01,240
to map back and forth.

308
00:17:01,240 --> 00:17:06,960
I see people using embeddings where you take individual rows or items within a SQL table

309
00:17:06,960 --> 00:17:10,400
and convert them into vector representation and then work with vectors.

310
00:17:10,400 --> 00:17:15,440
And then we could generalize vectors into some kind of tensor and work with tensors.

311
00:17:15,440 --> 00:17:21,360
And tensor operations are very easy to do on, say, GPUs or in some area where you have

312
00:17:21,360 --> 00:17:25,680
a better ability to execute the computation in a more efficient way.

313
00:17:25,680 --> 00:17:29,600
And tensors are very easy to map back and forth into the relational model.

314
00:17:29,600 --> 00:17:35,120
And then finally you have the heart and soul of Motif is moving it into a sequence representation,

315
00:17:35,120 --> 00:17:39,560
operating on sequences directly, and then moving sequences back into the relational

316
00:17:39,560 --> 00:17:43,640
model when they need to be analyzed in a different way.

317
00:17:43,640 --> 00:17:48,200
And if this all sounds really crazy to you, I want to just call out almost everybody who's

318
00:17:48,200 --> 00:17:52,320
watching this talk has done this mapping at some point in their lives.

319
00:17:52,320 --> 00:17:58,200
They have exported a CSV file from a database, worked with it in Excel, and uploaded it back

320
00:17:58,200 --> 00:17:59,200
into the database.

321
00:17:59,200 --> 00:18:01,600
You're using the design pattern that I'm proposing.

322
00:18:01,600 --> 00:18:04,480
If you've done this, and I bet if I asked, if there were a real audience here and you

323
00:18:04,480 --> 00:18:08,160
could all raise your hands, a lot of people would be raising them right now.

324
00:18:08,160 --> 00:18:13,720
This is the OG way of mapping something into a space where it's more malleable, the operations

325
00:18:13,720 --> 00:18:17,560
are easier to think about, and that you can be more productive.

326
00:18:17,560 --> 00:18:19,880
And think about what is the problem with this workflow?

327
00:18:19,880 --> 00:18:21,400
It's not Excel.

328
00:18:21,400 --> 00:18:24,520
It's that exporting CSVs and importing CSVs is a lossy converter.

329
00:18:24,520 --> 00:18:28,840
And if you had like lossless conversion, that actually this design pattern would be much

330
00:18:28,840 --> 00:18:32,200
more resilient than it really is in practice.

331
00:18:32,200 --> 00:18:33,800
I have one minute to wrap up.

332
00:18:33,800 --> 00:18:35,480
I just want to make the claim here.

333
00:18:35,480 --> 00:18:36,480
I love SQL.

334
00:18:36,480 --> 00:18:37,720
I'm not trying to tell you not to use it.

335
00:18:37,720 --> 00:18:42,720
I'm just saying that sometimes you may be considered not using it when things are hard

336
00:18:42,720 --> 00:18:44,600
to do in SQL.

337
00:18:44,600 --> 00:18:48,280
And it comes from this kind of willingness to admit that you're going to iterate on solving

338
00:18:48,280 --> 00:18:49,280
a problem.

339
00:18:49,280 --> 00:18:51,560
I don't think that we write queries one time.

340
00:18:51,560 --> 00:18:55,040
They're usually like a malleable artifact that we're trying to nudge into the right

341
00:18:55,040 --> 00:18:57,920
state and that we iterate as our business changes.

342
00:18:57,920 --> 00:19:02,280
And so expressive code and things that are able to express operations in a succinct way

343
00:19:02,280 --> 00:19:06,120
are very valuable, both for writing and for reading and understanding and reasoning about

344
00:19:06,120 --> 00:19:07,840
your system behavior.

345
00:19:07,840 --> 00:19:10,560
And so this expressiveness really matters.

346
00:19:10,560 --> 00:19:14,320
And choosing a good representation will actually make expressing the problem that you want

347
00:19:14,320 --> 00:19:18,600
to solve, the solution to the problem that you want to solve a lot easier.

348
00:19:18,600 --> 00:19:21,520
And this and the way to integrate it with the way that we currently work is to think

349
00:19:21,520 --> 00:19:23,240
really hard about the interfaces.

350
00:19:23,240 --> 00:19:26,400
Don't reinvent nouns, reinvent verbs.

351
00:19:26,400 --> 00:19:28,680
And you can you can add one new noun if you want.

352
00:19:28,680 --> 00:19:30,720
But then at that point, you need to think only about verbs.

353
00:19:30,720 --> 00:19:33,880
And this has been a very productive way for me to think about the problem.

354
00:19:33,880 --> 00:19:38,440
I've seen this design pattern in other places, like say in the tidyverse where, you know,

355
00:19:38,440 --> 00:19:42,960
the type of data frame that we use has expanded in scope over time.

356
00:19:42,960 --> 00:19:47,800
So I just want to kind of like encourage everybody to be a polyglot and think about new verbs.

357
00:19:47,800 --> 00:19:49,720
They can change the way you think about problems.

358
00:19:49,720 --> 00:19:53,200
And you might find that it's more productive and that you can still use SQL.

359
00:19:53,200 --> 00:19:54,200
It's always going to be there.

360
00:19:54,200 --> 00:19:55,200
All right.

361
00:19:55,200 --> 00:20:06,480
Thanks, everybody.

