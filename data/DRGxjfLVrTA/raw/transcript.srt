1
00:00:00,000 --> 00:00:07,120
Picture this. It's two months until a conference for which you're an organizer and a speaker.

2
00:00:07,120 --> 00:00:12,280
You've got planning a band, community, donations, and finances to organize. You're a founding

3
00:00:12,280 --> 00:00:17,840
hire at a seed stage startup, just moved to a new state, and also have life things to

4
00:00:17,840 --> 00:00:22,500
take care of. The smartest thing to do given all of this would be just to put your head

5
00:00:22,500 --> 00:00:27,640
down and get things done. That's why when I faced this situation, the only natural thing

6
00:00:27,640 --> 00:00:35,360
to do was to use my time to build a production-grade API. What preceded was a lesson in tool choices,

7
00:00:35,360 --> 00:00:40,120
overengineering, and dedication to a meme. Thank you for coming to my talk about building

8
00:00:40,120 --> 00:00:46,880
cheap HTTPS APIs. My name is Ben Labashian. I'm principal Emily at Work Helix and an organizer

9
00:00:46,880 --> 00:00:51,400
for NormConf. Today, I want to walk you through the infrastructure and deployment process

10
00:00:51,400 --> 00:00:56,880
for the NormConf goodies API. More than that, I want to speak with you about our most scarce

11
00:00:56,880 --> 00:01:03,520
of resources, time. But before I start, some useful info for folks who want to follow along

12
00:01:03,520 --> 00:01:08,720
at home. You can check out the goodies code repo above, and if you want to play around

13
00:01:08,720 --> 00:01:16,200
with the NormConf API, head over to api.normconf.com. If you haven't heard about the API, this is

14
00:01:16,200 --> 00:01:20,840
your chance to play around with the most useful, definitely need to have this above all other

15
00:01:20,840 --> 00:01:24,880
conference priorities. Vicky, please let me have this API out there.

16
00:01:24,880 --> 00:01:33,040
I mean, look at this thing. With a simple curl to api.normconf.com, you can get an ASCII-ified

17
00:01:33,040 --> 00:01:38,560
NormConf logo. You know who hasn't made a conference API? NeurIPS. You know who hasn't

18
00:01:38,560 --> 00:01:44,920
been invited to speak at NeurIPS? Me. Coincidence? Almost certainly. But we can at least agree

19
00:01:44,920 --> 00:01:50,280
that this is all very important stuff. Still, there's a lot to cover, and I don't want to

20
00:01:50,280 --> 00:01:54,000
lose the forest for the trees, so I'm going to rip off the band-aid and tell you exactly

21
00:01:54,000 --> 00:01:59,360
what the central message of this talk is now. You ready?

22
00:01:59,360 --> 00:02:05,720
We don't have enough time to do all the things we want or need to do in our jobs, let alone

23
00:02:05,720 --> 00:02:12,040
our lives. So many of you, as with me, feel the weight of wanting to learn it all and

24
00:02:12,040 --> 00:02:19,720
do it all. We push ourselves every day, hoping to accomplish more. And we achieve great things.

25
00:02:19,720 --> 00:02:24,800
Clearly this conference wouldn't exist were it not for its head organizer being the type

26
00:02:24,800 --> 00:02:29,720
of person to push themselves. If you're in this industry and you're listening to this

27
00:02:29,720 --> 00:02:35,760
talk, I suspect you're like this, too. This type of mentality bleeds into our jobs just

28
00:02:35,760 --> 00:02:41,560
as it seeps into our lives. As I said, I built the NormConf API while juggling many things,

29
00:02:41,560 --> 00:02:47,200
and yet I chose to build it. Having done so, I chose the tools I was familiar with. Some

30
00:02:47,200 --> 00:02:52,440
of those were good choices. Others held me back. If I had chosen more wisely, the work

31
00:02:52,440 --> 00:02:58,040
probably would have been done faster. So yes, this is a talk about having built the goodies

32
00:02:58,040 --> 00:03:03,480
API, but it's a metaphor about the time we don't have, realistically or not, and the

33
00:03:03,480 --> 00:03:08,720
consequences of choosing the wrong tools for the job. So when I talk about building APIs

34
00:03:08,720 --> 00:03:14,960
for cheap, I am actually referring to the tradeoffs we make among our resources, time,

35
00:03:14,960 --> 00:03:20,200
cognitive energy, and cost savings. Okay. Now that we've established that, here's how

36
00:03:20,200 --> 00:03:25,800
it's going to work. First, I'll talk about the initial steps I took. Then I'll talk about

37
00:03:25,800 --> 00:03:31,120
the aspects of software I like. I've called these aspects normy software. It's completely

38
00:03:31,120 --> 00:03:36,840
made up, but I can do that because, again, this isn't a NeurIPS talk. Finally, I'll talk

39
00:03:36,840 --> 00:03:40,640
about some pains of deploying APIs to the cloud. Today we're going to be talking about

40
00:03:40,640 --> 00:03:46,320
AWS, but this easily could have been applied to any of the big cloud platforms. And that'll

41
00:03:46,320 --> 00:03:53,600
be the talk. Okay. So let's get things started. So when I sat down to build the goodies API,

42
00:03:53,600 --> 00:03:58,160
there was no doubt in my mind what I was going to do. That's because as an MLE, I spend a

43
00:03:58,160 --> 00:04:04,080
lot of time working with and building APIs. Most models, if they're going to be any good,

44
00:04:04,080 --> 00:04:08,680
have to be served. Someone or something needs to be able to interact with the model and

45
00:04:08,680 --> 00:04:14,160
its outputs. Now, data scientists of a certain type might build APIs for their models, but

46
00:04:14,160 --> 00:04:18,160
oftentimes it's the MLEs who are tasked with building or refining them to become production

47
00:04:18,160 --> 00:04:22,920
ready. That's the nature of the position. We are relied upon to know a lot of things

48
00:04:22,920 --> 00:04:30,000
in order to solve many very different problems. That's why tooling choice is so important.

49
00:04:30,000 --> 00:04:34,360
As MLEs, we cannot afford to embed software into our systems that makes them unable to

50
00:04:34,360 --> 00:04:40,440
scale or that cause inefficiencies. Intuitively, most of us understand this. The problem is

51
00:04:40,440 --> 00:04:46,480
it's hard to avoid bad tool choices in practice. Why? Well, when I went about building the

52
00:04:46,480 --> 00:04:53,800
goodies API, I stuck with what I know. Fast API, Docker, GitHub, AWS. These are my bread

53
00:04:53,800 --> 00:04:58,280
and butter. I use them every day and being time pressed and trying to do everything at

54
00:04:58,280 --> 00:05:03,480
once, I reached for them when I sat down to program. Here's a simple diagram that illustrates

55
00:05:03,480 --> 00:05:08,520
what I imagined the goodies API would look like. To begin, I'd start with Python. Easy,

56
00:05:08,520 --> 00:05:13,840
functional, well supported. When it came to an API framework, I reached for fast API.

57
00:05:13,840 --> 00:05:19,920
It's my go-to framework for reasons I'll discuss soon. Next, Docker. It's ubiquitous, straightforward,

58
00:05:19,920 --> 00:05:24,600
gets the job done. After that, I'd push to Git, which would activate a GitHub action

59
00:05:24,600 --> 00:05:29,320
CICD for testing and deployment. Finally, that would deploy the container straight to

60
00:05:29,320 --> 00:05:35,000
AWS, where it would be hosted in Elastic Container Service or ECS. In my mind, all of it can

61
00:05:35,000 --> 00:05:39,360
be done in a day or two. And for the most part, it worked out. Because if you choose

62
00:05:39,360 --> 00:05:46,000
your tools wisely, they make your job easier. That is, they are cheaper to use. Your tools

63
00:05:46,000 --> 00:05:52,240
should make your job easier. Time is expensive. We have a lot to do. This brings me to my

64
00:05:52,240 --> 00:05:56,160
next section of the talk. Normie software or the benefits of choosing good software

65
00:05:56,160 --> 00:06:02,360
tools. As I've said, when I select my tools properly, I look out for what I'm calling

66
00:06:02,360 --> 00:06:07,800
the qualities of normie software. There's not much to it. To be a normie software, a

67
00:06:07,800 --> 00:06:14,160
tool has to have one or more of the following qualities. They do the thing they say they

68
00:06:14,160 --> 00:06:21,040
do. They are an investment. They are easy to pick up. I'm going to be citing these tenets

69
00:06:21,040 --> 00:06:27,160
throughout my talk. Keep an eye out. Let's break these down one by one. They do the thing

70
00:06:27,160 --> 00:06:33,240
they say they do. That is, a hammer hits things, an API creation tool creates APIs. That's

71
00:06:33,240 --> 00:06:37,600
what it does. If you're spending an inordinate amount of time trying to get a tool to the

72
00:06:37,600 --> 00:06:41,480
point that will accomplish your underlying goal, you should ask yourself, is that what

73
00:06:41,480 --> 00:06:45,840
this tool is meant to do? Is there a better tool to get me there? Should I be creating

74
00:06:45,840 --> 00:06:54,120
doc from scratch in Fortran or could I just find a better way? Next, they are an investment.

75
00:06:54,120 --> 00:06:59,600
An investment in yourself, in the current problem you're facing, and in future problems

76
00:06:59,600 --> 00:07:05,000
that will also need to be solved. This one's hand wavy, so let me clarify. We've already

77
00:07:05,000 --> 00:07:09,800
established that people in our field, in my case, MLEs, are required to solve different

78
00:07:09,800 --> 00:07:16,000
time box problems which entail a significant cognitive load. These are costs. It's hard

79
00:07:16,000 --> 00:07:20,200
to remember everything, let alone do all the things we do. If a tool is going to require

80
00:07:20,200 --> 00:07:25,640
us to learn how to operate it, the time spent learning it becomes an investment if the tool

81
00:07:25,640 --> 00:07:32,640
will also be used in future projects. You want your tools to scale. You want your time

82
00:07:32,640 --> 00:07:38,200
to scale. That's what an investment, that's why it's an investment, and that's why I argue

83
00:07:38,200 --> 00:07:46,400
you should view your time and tools as such. And most critically, they are easy to pick

84
00:07:46,400 --> 00:07:52,720
up. That is, they do the hard work for you, thus making you want to use them. This one

85
00:07:52,720 --> 00:07:57,440
I'd like to expand on a little bit more. There's an often cited quote by computer scientist

86
00:07:57,440 --> 00:08:02,880
Tony Hoare. It says, the most important property of a program is whether it accomplishes the

87
00:08:02,880 --> 00:08:08,240
intentions of its user. Maybe you've heard this one floating around. Well, contextually,

88
00:08:08,240 --> 00:08:13,920
Hoare was writing in a paper about the axiomatic qualities of programs. And aptly, this was

89
00:08:13,920 --> 00:08:19,480
the first sentence of a section called proofs of program correctness. So people will cite

90
00:08:19,480 --> 00:08:25,960
this, as I just did, to make a point about the purpose of programs. And it's true. Programs

91
00:08:25,960 --> 00:08:31,160
should accomplish the goals of their users. But programs are made by people, at least

92
00:08:31,160 --> 00:08:36,640
for now. And people can accomplish these goals in many different ways. It would be nice if

93
00:08:36,640 --> 00:08:43,120
there were one and only one obvious way to program. But most often there isn't. Just

94
00:08:43,120 --> 00:08:47,840
because software does the thing you want it to do, the first rule of normie software,

95
00:08:47,840 --> 00:08:52,480
does not mean it does it in a way that is amenable for time-pressed people like ourselves.

96
00:08:52,480 --> 00:08:57,080
Far better if an equivalent tool has the resources you need to learn what you need to accomplish

97
00:08:57,080 --> 00:09:03,520
your goals. That's what I mean when I say good software is easy to pick up. Yes, first

98
00:09:03,520 --> 00:09:08,540
a program should do the thing. But Lord almighty, wouldn't it be nice if I didn't have to struggle

99
00:09:08,540 --> 00:09:13,840
to learn how to do it with every additional tool? Lower the barrier of accessibility for

100
00:09:13,840 --> 00:09:18,840
your tools and more people will want to use them. Now, I've been speaking at a high level

101
00:09:18,840 --> 00:09:24,000
about what normie qualities are and why tools with these qualities make APIs and programming

102
00:09:24,000 --> 00:09:30,120
cheap. But now I want to show you what I mean. So as an example of the first quality of normie

103
00:09:30,120 --> 00:09:36,080
software, let's take a look at fast API, which I use to develop the goodies API. To use fast

104
00:09:36,080 --> 00:09:41,240
API, one need not know the depths of app building or have a degree on state. The maintainers

105
00:09:41,240 --> 00:09:47,120
of fast API know that ultimately all you want to do is create APIs. To have a means with

106
00:09:47,120 --> 00:09:51,840
which to deal with requests and responses, this is what I mean when I talk about tools

107
00:09:51,840 --> 00:09:58,560
doing the thing they do. Fast API is really very good at that. In the app, as you can

108
00:09:58,560 --> 00:10:03,360
see from the sample code here, all I had to do was to create an endpoint with a decorator

109
00:10:03,360 --> 00:10:08,580
over my function, get norm conf. In this case, it's a function that returns an ASCII version

110
00:10:08,580 --> 00:10:13,800
of the norm conf logo that you saw before. It's a get request, so you write get. You

111
00:10:13,800 --> 00:10:18,560
want a certain path, you write the path. You want to ensure a plain text response, well,

112
00:10:18,560 --> 00:10:23,520
lo and behold, in the body of the function, there is an object that allows you to do that.

113
00:10:23,520 --> 00:10:29,420
So yes, I use fast API, built the functions I needed, added the endpoints, and importantly,

114
00:10:29,420 --> 00:10:37,560
I was done in no time. Okay. So from there, I knew I had to create an image, which leads

115
00:10:37,560 --> 00:10:41,600
me to my next point about normie software being an investment. With the goodies API,

116
00:10:41,600 --> 00:10:45,880
I knew ahead of time that whatever I created, Docker would handle it because it's a tool

117
00:10:45,880 --> 00:10:50,080
I'm deeply familiar with. This was useful, not only at the micro level of programming,

118
00:10:50,080 --> 00:10:55,560
but at the macro level of optimizing cognitive effort. With good tools, that is tools amenable

119
00:10:55,560 --> 00:11:00,240
to investment, each use builds upon itself so that your experience of the software is

120
00:11:00,240 --> 00:11:05,940
a feedback loop that opens up even more use cases. I'm going to keep banging on this drum.

121
00:11:05,940 --> 00:11:10,720
As analysts and data scientists, we are required to know a lot about a lot. If there's a single

122
00:11:10,720 --> 00:11:14,820
tool that can solve many different problems, that's cognitive load that would have otherwise

123
00:11:14,820 --> 00:11:19,920
been stratified that is now internalized. That's time I don't have to use picking up

124
00:11:19,920 --> 00:11:24,800
another tool. That's why I think Docker is normie software. It's something you benefit

125
00:11:24,800 --> 00:11:31,800
from returning to time and again, as long as it works. With the goodies API, as can

126
00:11:31,800 --> 00:11:37,280
be seen here, it was a simple thing to import Python 3.10, copy the relevant files, install

127
00:11:37,280 --> 00:11:42,800
the dependencies, and run a simple uvicorn command. But my point is, it could have been

128
00:11:42,800 --> 00:11:46,080
any number of things I needed to do and I would have felt just as comfortable because

129
00:11:46,080 --> 00:11:51,400
my experiences with the software have built upon themselves. This was a time saver. When

130
00:11:51,400 --> 00:11:55,800
you're choosing your tools at work, try not to reinvent the wheel, as you may lose out

131
00:11:55,800 --> 00:12:04,120
on current and future productivity. At this point, the image has been made, but it has

132
00:12:04,120 --> 00:12:08,720
nowhere to go. It has to go somewhere. And that's where GitHub actions come in. If you're

133
00:12:08,720 --> 00:12:13,000
not aware of GitHub actions, this is a service that allows users to automate their workflows.

134
00:12:13,000 --> 00:12:16,520
That means testing code, building images, sending them where they need to go, all with

135
00:12:16,520 --> 00:12:21,000
a simple push to your GitHub repository. Pretty nice. Now, because it requires a bunch of

136
00:12:21,000 --> 00:12:25,320
domain knowledge, some might expect me to say that GitHub actions isn't normie software,

137
00:12:25,320 --> 00:12:30,800
that it's not easy to pick up. But to be honest, I think it functions just as I'd want it to.

138
00:12:30,800 --> 00:12:36,000
When software is this configurable, we will be required to learn a thing or two. To me,

139
00:12:36,000 --> 00:12:41,280
being easy to pick up is a function of the amount of effort I have to put in to accomplish

140
00:12:41,280 --> 00:12:47,120
my goals. And how much support is available to me to quickly solve my problems. If I have

141
00:12:47,120 --> 00:12:52,160
to dig around in dense documentation, that's a sign of software being too involved, of

142
00:12:52,160 --> 00:12:57,400
not being accessible software. GitHub actions has great documentation. On the subject of

143
00:12:57,400 --> 00:13:01,240
documentation, I actually asked about this the other day in normcom slack. I wanted to

144
00:13:01,240 --> 00:13:05,040
hear other people's thoughts about it, and I got some really great responses from the

145
00:13:05,040 --> 00:13:09,480
community. Basically, my message was about my contention that companies with products

146
00:13:09,480 --> 00:13:14,680
with broad use cases often have dense, inaccessible documentation. That they're not easy to pick

147
00:13:14,680 --> 00:13:20,160
up. And among the great responses I got was this one from Sarah Moyer, who unsurprisingly

148
00:13:20,160 --> 00:13:24,440
writes about this stuff. Her response was like, yeah, these companies have products

149
00:13:24,440 --> 00:13:29,920
with endless configurability, and therefore write documentation that is super dense and

150
00:13:29,920 --> 00:13:33,920
detailed. But the user often doesn't need that. The user just wants to do the thing

151
00:13:33,920 --> 00:13:40,040
they want to do. They want to pick up the software and run. That was me. For example,

152
00:13:40,040 --> 00:13:44,040
I use poetry for my dependency management. In building the API, I didn't want to have

153
00:13:44,040 --> 00:13:48,560
to use a different dependency manager when deploying my code from that which I use locally.

154
00:13:48,560 --> 00:13:54,240
So I literally just typed poetry install GitHub actions into Google and found an action and

155
00:13:54,240 --> 00:13:59,960
code examples I needed to build and test with poetry in the goodies CI CD pipeline. This

156
00:13:59,960 --> 00:14:05,200
was a portion of the result. Almost literally a copy and paste from what I found. It was

157
00:14:05,200 --> 00:14:09,600
easy to find useful code. The code itself was very self explanatory. I.e., the above

158
00:14:09,600 --> 00:14:14,360
code doesn't seem very involved to me. Just a bunch of simple YAML. And I got what I needed

159
00:14:14,360 --> 00:14:19,360
to get done in a short amount of time. It was very easy to pick up.

160
00:14:19,360 --> 00:14:25,120
Altogether, the fast API, Docker, and GitHub action steps of the app development took maybe

161
00:14:25,120 --> 00:14:29,560
an afternoon to get a working draft done. But I told you at the beginning of the presentation

162
00:14:29,560 --> 00:14:33,360
that I was going to talk about the mistakes made along the way as an analogy of what we

163
00:14:33,360 --> 00:14:38,220
go through every day. And mistakes were made. The fact is, once I got to the cloud stage

164
00:14:38,220 --> 00:14:44,560
of my deployment, I found my productivity slowed significantly. My time started getting

165
00:14:44,560 --> 00:14:49,880
sucked up in areas I'd rather they hadn't. So how did that happen? Well, let's start

166
00:14:49,880 --> 00:14:53,480
with a common metaphor about what cloud providers do as I think it will help us discuss some

167
00:14:53,480 --> 00:14:58,560
of the issues I ran into deploying the app. So far as I can tell, cloud providers are

168
00:14:58,560 --> 00:15:02,520
kind of like industrial tool manufacturers. They know that their customers will have a

169
00:15:02,520 --> 00:15:06,920
diverse need for parts and tools. Yes, everyone will need screwdrivers and hammers, but the

170
00:15:06,920 --> 00:15:11,040
size of nails, the kind of materials, the amount of specialization and specification

171
00:15:11,040 --> 00:15:16,120
that will be needed, that is endless. So they do a bit of everything. And while scale has

172
00:15:16,120 --> 00:15:20,740
allowed cloud providers to offer many different services, the experience of using these services

173
00:15:20,740 --> 00:15:26,480
can feel unlike normie software. The problem in the cloud is not simply that it's someone

174
00:15:26,480 --> 00:15:30,440
else's tools that you're paying to use. It's that it's a warehouse of tools meant to apply

175
00:15:30,440 --> 00:15:35,280
to almost any situation. And therefore, for the tools are inefficient for your needs as

176
00:15:35,280 --> 00:15:38,920
they were for mine. So sometimes you just want a screwdriver. But when you go to the

177
00:15:38,920 --> 00:15:43,040
screwdriver section of the warehouse, there are 100 different specifications of screwdrivers.

178
00:15:43,040 --> 00:15:49,560
Also, none of them look like screwdrivers. Also, they're called AWS glue. For example,

179
00:15:49,560 --> 00:15:54,440
I was at the point of deploying the goodies API to ECS, a fully managed container orchestration

180
00:15:54,440 --> 00:15:59,840
service that felt fully managed by me. Now, the goal here was to host a container so that

181
00:15:59,840 --> 00:16:05,400
everyone can access its endpoints. As a concept, this is a very common need. We build software,

182
00:16:05,400 --> 00:16:08,960
containers are often the manner in which that software ships, and we want people to use

183
00:16:08,960 --> 00:16:14,040
that software. But it's not that easy. Instead, one needs to become pretty well acquainted

184
00:16:14,040 --> 00:16:18,920
with things like task definitions, service names and clusters. Even though in my case,

185
00:16:18,920 --> 00:16:23,780
this is an attempt to deploy to Fargate, which is nominally a serverless machine to run on

186
00:16:23,780 --> 00:16:30,800
to make life easier. To me, this isn't just doing the thing they say they do. As a comparison

187
00:16:30,800 --> 00:16:35,880
of the possibilities, and I know these are not apples to apples, don't cancel me, but

188
00:16:35,880 --> 00:16:41,360
in a service like Streamlet cloud, I simply connect a GitHub repo that contains a Docker

189
00:16:41,360 --> 00:16:47,440
file and my app is deployed. Often very quickly. Again, it's not a one to one comparison, but

190
00:16:47,440 --> 00:16:51,600
I have a hard time believing it needs to be much more complicated than that. So to me,

191
00:16:51,600 --> 00:16:57,480
this is the first aspect of the project that did not do the thing as it says it does.

192
00:16:57,480 --> 00:17:01,040
Which leads me to the next issue I experienced when deploying the goodies API. So let's say

193
00:17:01,040 --> 00:17:05,640
I've pushed my app successfully and it's being hosted in ECS. Well, ECS is by definition

194
00:17:05,640 --> 00:17:11,160
elastic, and its IP address is dynamic. So every time I make a change, a new IP address

195
00:17:11,160 --> 00:17:15,800
will deploy. But as it is, that's not very useful for norm conf attendees who would like

196
00:17:15,800 --> 00:17:21,680
nothing more than to ping the API to get all its really very important outputs. So what

197
00:17:21,680 --> 00:17:25,960
do you have to do? Well, you have to connect to route tables, network gateways, subnet,

198
00:17:25,960 --> 00:17:30,160
security groups, and load balancers all in one. Now be sure to work with a DNS in route

199
00:17:30,160 --> 00:17:34,640
53 right away. That comes after the load balancer. And for good measure, if you want it to be

200
00:17:34,640 --> 00:17:39,520
a secure HTTPS API, you're going to have to set up secure port forwarding on 443, which

201
00:17:39,520 --> 00:17:44,400
requires listeners and target groups. And well, it just gets tiring to list out. Especially

202
00:17:44,400 --> 00:17:48,320
because this wasn't even what I was supposed to be working on. Now, even if you have a

203
00:17:48,320 --> 00:17:51,720
general understanding of all these things like me, you can still get tripped up by the

204
00:17:51,720 --> 00:17:55,900
ordering of these operations or even more frustrating, which I am permissions you need

205
00:17:55,900 --> 00:18:00,560
to set up. The issue is, as I've said, we have been given a warehouse full of tools

206
00:18:00,560 --> 00:18:06,500
and told to go make a house where usually you have plumbers and electricians and more.

207
00:18:06,500 --> 00:18:10,860
We often have to be all those things at once. We didn't always have to be network engineers

208
00:18:10,860 --> 00:18:16,740
in addition to everything else, but to deploy an API in big cloud services, oftentimes now

209
00:18:16,740 --> 00:18:22,160
we do. And if you expect us to know all these things, that's fine. But it's necessarily

210
00:18:22,160 --> 00:18:28,640
a trade off from some other work that we could be working on. It's costly. Ideally, we shouldn't

211
00:18:28,640 --> 00:18:32,320
have to be doing all of this. We could be working on the things that really matter,

212
00:18:32,320 --> 00:18:37,360
like debating the usefulness of automatic code formatters or which IDE to use. But the

213
00:18:37,360 --> 00:18:41,800
way it is right now, I think that there should be an easier way. And so here I would argue

214
00:18:41,800 --> 00:18:45,880
that work on things like networking is not an investment. I'm not benefiting from working

215
00:18:45,880 --> 00:18:49,480
on these tools because they're not helping me achieve my core functionality. They can

216
00:18:49,480 --> 00:18:54,240
be abstracted away and I would not lose much. That's why I think this network engineering

217
00:18:54,240 --> 00:18:59,620
was not a useful software investment for me. Okay, so finally, let's talk about things

218
00:18:59,620 --> 00:19:04,680
more generally. To get through all the API deployment from ECS and Route 53 to load balancing

219
00:19:04,680 --> 00:19:10,320
and more, we need to rely on documentation. The problem is, well, as Vicky says here,

220
00:19:10,320 --> 00:19:14,400
cloud documentation can be pretty rough. And as we've established, the more complicated

221
00:19:14,400 --> 00:19:20,360
the system, the more it can do. The denser the cloud documentation typically is. But

222
00:19:20,360 --> 00:19:23,600
when you're faced with all the documentation, you're often left trying to parse through

223
00:19:23,600 --> 00:19:28,200
it for your relevant use case. And if there are a few examples with sample code, it can

224
00:19:28,200 --> 00:19:32,660
get rough. That's why I'd argue when working a lot with cloud software, including what

225
00:19:32,660 --> 00:19:38,000
it took to deploy the goodies API, it's more involved than it needs to be. Even simply

226
00:19:38,000 --> 00:19:43,360
just by trying to find the relevant information you need to work to accomplish your use case.

227
00:19:43,360 --> 00:19:49,000
This is why this too broke a rule of normie software. It is not easy to pick up and it

228
00:19:49,000 --> 00:19:54,400
could be easier. Which brings me to where we started. Remember the original diagram

229
00:19:54,400 --> 00:20:01,640
I had with my ideal setup? Well, on the left is that diagram. And on the right is actually

230
00:20:01,640 --> 00:20:06,160
a relatively simplified version of where I ended up. It's a bunch scrunched in there.

231
00:20:06,160 --> 00:20:10,880
So let me summarize. While making the actual app stayed the same, the actual deployment

232
00:20:10,880 --> 00:20:15,800
to the cloud was far less normie than I wanted. So where does that leave us? I started this

233
00:20:15,800 --> 00:20:20,000
talk by saying that I wanted to build a cheap API for the conference. And in some ways I

234
00:20:20,000 --> 00:20:25,400
did. Over two months, we've paid maybe like $30 for a scalable production grade API. But

235
00:20:25,400 --> 00:20:30,400
in other ways, the API was costly. Costly on my time. True, some of the tools I reached

236
00:20:30,400 --> 00:20:35,200
for were beneficial to me. I argue that's because those tools had traits of normie software.

237
00:20:35,200 --> 00:20:39,600
They do the things they say they do. They were investments. They're easy to pick up.

238
00:20:39,600 --> 00:20:43,160
But once I reached the deployment to the cloud, my experience left something to be desired.

239
00:20:43,160 --> 00:20:46,840
It was too much work on things that distract from the core features of what I think we

240
00:20:46,840 --> 00:20:51,340
should be doing. So you may be thinking, okay, well, then the solution is to pick a service

241
00:20:51,340 --> 00:20:56,800
that specializes in hosting and deployment, Ben. And that may or may not be true. But

242
00:20:56,800 --> 00:21:00,680
what I'm really trying to get at here is that if I had taken the time to think about the

243
00:21:00,680 --> 00:21:05,200
tradeoffs of my software choices, I would have had other time for a thousand other things

244
00:21:05,200 --> 00:21:09,880
I'd like to be doing with my time. And in our jobs, it's the same thing. We're often

245
00:21:09,880 --> 00:21:15,440
jumping from task to task. Especially if you're at an early stage startup like me. Instead

246
00:21:15,440 --> 00:21:19,080
of grabbing the shiny software, it behooves us to take a moment and consider which of

247
00:21:19,080 --> 00:21:24,220
our screwdrivers to use. Especially because if it has to do with cloud, it will often

248
00:21:24,220 --> 00:21:29,320
take longer than it probably could. So my final message at the end of all of this is

249
00:21:29,320 --> 00:21:33,600
seek out Normie software. Tools that you're familiar with are good. But even if you're

250
00:21:33,600 --> 00:21:36,880
comfortable with the cloud like me, recognize the scale of the problem you're trying to

251
00:21:36,880 --> 00:21:42,960
solve. Don't use a chainsaw when scissors will do. And more generally, our time is precious.

252
00:21:42,960 --> 00:21:48,360
We are asked to do so much from ourselves and our jobs. Do yourself a favor. Choose

253
00:21:48,360 --> 00:21:54,040
your software carefully and respect your time both now and in the future. Now, some of you,

254
00:21:54,040 --> 00:21:57,000
I know we're hoping I literally walk through the instructions to deploy the app to the

255
00:21:57,000 --> 00:22:01,280
cloud, but I thought that would be too boring to regurgitate. So I wrote a post. It's on

256
00:22:01,280 --> 00:22:06,240
that QR code. You can check my website. But for everyone else, I've appreciated your time.

257
00:22:06,240 --> 00:22:09,520
Thank you so much. This conference has been amazing. And it's been a great, I'm really

258
00:22:09,520 --> 00:22:24,560
grateful for the opportunity to speak with you today.

